import os
import json

# Get directory where this script is located
THIS_DIR = os.path.dirname(os.path.abspath(__file__))

# Paths relative to the script's directory
CUSTOM_DATASET_FILE = os.path.join(THIS_DIR, "..", "..", "custom_elevator_dataset.json")
MTA_STATIONS_FILE = os.path.join(THIS_DIR, "..", "..", "mta_subway_complexes.json")
OUTPUT_FILE = os.path.join(THIS_DIR, "..", "..", "generated", "street_to_complex_lines.geojson")

# Load datasets
with open(CUSTOM_DATASET_FILE, "r") as f:
    custom_data = json.load(f)

with open(MTA_STATIONS_FILE, "r") as f:
    mta_stations = json.load(f)

# Create a lookup dictionary for complexes by complex_id
station_complex_lookup = {
    station_complex["properties"]["complex_id"]: station_complex["geometry"]["coordinates"]
    for station_complex in mta_stations["features"]
}

# Create a list of LineString features
lines = []

for feature in custom_data["features"]:
    # Check if the feature is a street elevator and the system is 'nyc_mta' or 'nyc_sir'
    if feature["properties"].get("isStreet") and (
        feature["properties"].get("system") == "nyc_mta" or feature["properties"].get("system") == "nyc_sir"
    ):
        complex_id = feature["properties"].get("complexID")
        title = feature["properties"].get("title")
        elevatorno = feature["properties"].get("elevatorno")
        ada = feature["properties"].get("ada")

        if complex_id in station_complex_lookup:
            street_elevator_coords = feature["geometry"]["coordinates"]
            complex_coords = station_complex_lookup[complex_id]

            # Determine side
            side = "left" if street_elevator_coords[0] < complex_coords[0] else "right"

            # Create a LineString feature
            lines.append({
                "type": "Feature",
                "geometry": {
                    "type": "LineString",
                    "coordinates": [street_elevator_coords, complex_coords]
                },
                "properties": {
                    "complex_id": complex_id,
                    "elevator_no": elevatorno,
                    "station_name": title,
                    "ada": ada,
                    "side": side
                }
            })

# Create the output GeoJSON structure
output_geojson = {
    "_comment": "This file is auto-generated by updateData.py. Do not edit manually.",
    "type": "FeatureCollection",
    "features": lines
}

# Write to output file
with open(OUTPUT_FILE, "w") as f:
    json.dump(output_geojson, f, indent=2)

print(f"\n** ðŸš¶ [3] GENERATE COMPLEX->ELEVATOR LINES ðŸš¶ **:Generated {len(lines)} LineString features and saved to {OUTPUT_FILE}")
import json
import os
import requests

API_URL = "https://data.ny.gov/resource/39hk-dx4f.geojson"
THIS_DIR = os.path.dirname(os.path.abspath(__file__))
STATIONS_FILE = os.path.join(THIS_DIR, "..", "..", "mta_subway_stations_all.json")

def fetch_latest_station_data():
    print(f"\n** üöÉ [0a] STATIONS DATASET üöÉ**\nFetching latest MTA station data...")

    # Fetch new data from API
    response = requests.get(API_URL)
    response.raise_for_status()
    new_data = response.json()
    if isinstance(new_data, dict) and "features" in new_data:
        new_data = new_data["features"]

    # Load old data if file exists and is valid
    old_data = []
    if os.path.exists(STATIONS_FILE):
        try:
            with open(STATIONS_FILE, "r", encoding="utf-8") as f:
                loaded = json.load(f)
                if isinstance(loaded, dict) and "features" in loaded:
                    old_data = loaded["features"]
        except (json.JSONDecodeError, FileNotFoundError):
            print(f"‚ö†Ô∏è Warning: {STATIONS_FILE} is empty or invalid. Starting fresh.")
            old_data = []

    # Convert to dict keyed by gtfs_stop_id for diffing
    old_id = {item["properties"]["gtfs_stop_id"]: item for item in old_data}
    new_id = {item["properties"]["gtfs_stop_id"]: item for item in new_data}

    # Track differences
    added = [new_id[sid] for sid in new_id if sid not in old_id]
    removed = [old_id[sid] for sid in old_id if sid not in new_id]
    modified = []

    for sid, new_item in new_id.items():
        if sid in old_id:
            old_props = old_id[sid]["properties"]
            new_props = new_item["properties"]
            changes = {k: {"OLD": old_props.get(k), "‚Üí NEW": v}
                       for k, v in new_props.items()
                       if old_props.get(k) != v}
            if changes:
                modified.append({
                    "gtfs_stop_id": sid,
                    "stop_name": new_props.get("stop_name"),
                    "changes": changes
                })

    # Print summary
    if added or removed or modified:
        print(f"Added: {len(added)} | Removed: {len(removed)} | Modified: {len(modified)}")
    else:
        print("No changes detected.")

    # Construct feature collection with comment
    feature_collection = {
        "_comment": "This file is auto-generated by updateData.py, do not edit manually",
        "type": "FeatureCollection",
        "features": new_data
    }

    # Save to file
    os.makedirs(os.path.dirname(STATIONS_FILE), exist_ok=True)
    with open(STATIONS_FILE, "w", encoding="utf-8") as f:
        json.dump(feature_collection, f, indent=2)

    print(f"‚úÖ Saved latest MTA station data to {STATIONS_FILE}")
    return new_data


if __name__ == "__main__":
    fetch_latest_station_data()

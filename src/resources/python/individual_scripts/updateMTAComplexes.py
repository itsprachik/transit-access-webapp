import json
import os
import requests

API_URL = "https://data.ny.gov/resource/5f5g-n3cz.json"
THIS_DIR = os.path.dirname(os.path.abspath(__file__))
COMPLEXES_FILE = os.path.join(THIS_DIR, "..", "..", "mta_subway_complexes.json")

def fetch_latest_complex_data():
    print(f"\n** ðŸšƒ [0b] COMPLEXES DATASET ðŸšƒ **\nFetching latest MTA complex data...")

    response = requests.get(API_URL)
    response.raise_for_status()
    new_data_raw = response.json()

    # Convert API JSON into GeoJSON Features
    new_features = []
    for row in new_data_raw:
        try:
            lat = float(row.get("latitude", 0))
            lon = float(row.get("longitude", 0))
        except (ValueError, TypeError):
            continue

        num_stations_int = int(row.get("number_of_stations_in_complex"))
        station_ids = row.get("station_ids")
        gtfs_stop_ids = row.get("gtfs_stop_ids")

        # Reformat station IDs if multiple stations
        if num_stations_int > 1 and station_ids:
            station_ids = station_ids.replace("; ", "/")
            gtfs_stop_ids = gtfs_stop_ids.replace("; ", "/")

        feature = {
            "type": "Feature",
            "geometry": {
                "type": "Point",
                "coordinates": [lon, lat],
            },
            "properties": {
                "complex_id": row.get("complex_id"),
                "station_ids": station_ids,
                "gtfs_stop_ids": gtfs_stop_ids,
                "stop_name": row.get("stop_name"),
                "ada": row.get("ada"),
                "borough": row.get("borough"),
                "num_stations_in_complex": row.get("number_of_stations_in_complex", "1"),
            },
        }
        new_features.append(feature)

    # Wrap in FeatureCollection
    new_feature_collection = {
        "_comment": "This file is auto-generated by updateData.py, do not edit manually",
        "type": "FeatureCollection",
        "features": new_features,
    }

    # Load old data if it exists
    if os.path.exists(COMPLEXES_FILE):
        with open(COMPLEXES_FILE, "r", encoding="utf-8") as f:
            old_data = json.load(f)
            old_features = old_data.get("features", [])
    else:
        old_features = []

    # Convert old/new to dict keyed by complex_id
    old_id = {f["properties"]["complex_id"]: f["properties"] for f in old_features}
    new_id = {f["properties"]["complex_id"]: f["properties"] for f in new_features}

    # Track differences
    added = [new_id[cid] for cid in new_id if cid not in old_id]
    removed = [old_id[cid] for cid in old_id if cid not in new_id]
    modified = []

    for cid, new_props in new_id.items():
        if cid in old_id:
            old_props = old_id[cid]
            changes = {}
            for key, new_val in new_props.items():
                old_val = old_props.get(key)
                if old_val != new_val:
                    changes[key] = {"OLD": old_val, "â†’ NEW": new_val}
            if changes:
                modified.append({
                    "complex_id": cid,
                    "stop_name": new_props.get("stop_name"),
                    "changes": changes
                })

    # Print summary
    if added or removed or modified:
        print(f"Added: {len(added)} | Removed: {len(removed)} | Modified: {len(modified)}")
        if added:
            print("\n--- Added ---")
            for item in added:
                print(item)
        if removed:
            print("\n--- Removed ---")
            for item in removed:
                print(item)
        if modified:
            print("\n--- Modified ---")
            for item in modified:
                print(item)
    else:
        print("No changes detected.")

    # Save as GeoJSON
    with open(COMPLEXES_FILE, "w", encoding="utf-8") as f:
        json.dump(new_feature_collection, f, indent=2)

    print(f"âœ… Saved {len(new_features)} complexes to {COMPLEXES_FILE}")
    return new_feature_collection

if __name__ == "__main__":
    fetch_latest_complex_data()
